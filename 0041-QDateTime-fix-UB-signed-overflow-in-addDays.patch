From 99b288f2aa0a3dfb667f60f88d7382a6a90a0feb Mon Sep 17 00:00:00 2001
From: Marc Mutz <marc.mutz@qt.io>
Date: Thu, 16 Dec 2021 14:23:08 +0100
Subject: [PATCH 041/157] QDateTime: fix UB (signed overflow) in addDays()

The comment indicated that the author expected any overflow to be
caught by a bounds check in the subsequent function, however, signed
overflow is UB, so anything can happen.

Fix by using our API for safe additions instead.

* asturmlechner 2021-12-29: use add_overflow instead of qAddOverflow

Pick-to: 6.3 6.2 5.15
Change-Id: I41909defffa5305b02fdfcf6d5808e0d9fd5924f
Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>
(cherry picked from commit c47c98ea2b8ec9e8bda51d86f3168bba28c3291a)
---
 src/corelib/time/qdatetime.cpp | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/src/corelib/time/qdatetime.cpp b/src/corelib/time/qdatetime.cpp
index ec12569e3f..e84c6b8804 100644
--- a/src/corelib/time/qdatetime.cpp
+++ b/src/corelib/time/qdatetime.cpp
@@ -43,6 +43,7 @@
 #if QT_CONFIG(datetimeparser)
 #include "private/qdatetimeparser_p.h"
 #endif
+#include <private/qnumeric_p.h>
 
 #include "qdatastream.h"
 #include "qset.h"
@@ -1429,9 +1430,10 @@ QDate QDate::addDays(qint64 ndays) const
     if (isNull())
         return QDate();
 
-    // Due to limits on minJd() and maxJd() we know that any overflow
-    // will be invalid and caught by fromJulianDay().
-    return fromJulianDay(jd + ndays);
+    if (qint64 r; Q_UNLIKELY(add_overflow(jd, ndays, &r)))
+        return QDate();
+    else
+        return fromJulianDay(r);
 }
 
 /*!
-- 
2.38.1

