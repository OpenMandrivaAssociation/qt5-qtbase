--- qtbase-opensource-src-5.8.0-beta/src/network/ssl/qsslkey_openssl.cpp.0054~	2016-11-07 16:23:59.258636661 +0100
+++ qtbase-opensource-src-5.8.0-beta/src/network/ssl/qsslkey_openssl.cpp	2016-11-07 16:23:59.260636617 +0100
@@ -178,7 +178,7 @@ int QSslKeyPrivate::length() const
 
     switch (algorithm) {
         case QSsl::Rsa: return q_RSA_bits(rsa);
-        case QSsl::Dsa: return q_DSA_bits(dsa);
+        case QSsl::Dsa: return 0; //### TODO: missing openssl method q_DSA_bits(dsa);
 #ifndef OPENSSL_NO_EC
         case QSsl::Ec: return q_EC_GROUP_get_degree(q_EC_KEY_get0_group(ec));
 #endif
--- qtbase-opensource-src-5.8.0-beta/src/network/ssl/qsslsocket_openssl.cpp.0054~	2016-10-27 13:30:49.000000000 +0200
+++ qtbase-opensource-src-5.8.0-beta/src/network/ssl/qsslsocket_openssl.cpp	2016-11-07 16:23:59.260636617 +0100
@@ -1543,7 +1543,7 @@ void QSslSocketBackendPrivate::continueH
     if (readBufferMaxSize)
         plainSocket->setReadBufferSize(readBufferMaxSize);
 
-    if (q_SSL_ctrl((ssl), SSL_CTRL_GET_SESSION_REUSED, 0, NULL))
+    if (q_SSL_session_reused(ssl))
         configuration.peerSessionShared = true;
 
 #ifdef QT_DECRYPT_SSL_TRAFFIC
--- qtbase-opensource-src-5.8.0-beta/src/network/ssl/qsslsocket_openssl_symbols.cpp.0054~	2016-11-07 16:23:59.259636639 +0100
+++ qtbase-opensource-src-5.8.0-beta/src/network/ssl/qsslsocket_openssl_symbols.cpp	2016-11-07 16:23:59.260636617 +0100
@@ -145,10 +145,10 @@ DEFINEFUNC(int, ASN1_STRING_length, ASN1
 DEFINEFUNC2(int, ASN1_STRING_to_UTF8, unsigned char **a, a, ASN1_STRING *b, b, return 0, return);
 DEFINEFUNC4(long, BIO_ctrl, BIO *a, a, int b, b, long c, c, void *d, d, return -1, return)
 DEFINEFUNC(int, BIO_free, BIO *a, a, return 0, return)
-DEFINEFUNC(BIO *, BIO_new, BIO_METHOD *a, a, return 0, return)
+DEFINEFUNC(BIO *, BIO_new, const BIO_METHOD *a, a, return 0, return)
 DEFINEFUNC2(BIO *, BIO_new_mem_buf, void *a, a, int b, b, return 0, return)
 DEFINEFUNC3(int, BIO_read, BIO *a, a, void *b, b, int c, c, return -1, return)
-DEFINEFUNC(BIO_METHOD *, BIO_s_mem, void, DUMMYARG, return 0, return)
+DEFINEFUNC(const BIO_METHOD *, BIO_s_mem, void, DUMMYARG, return 0, return)
 DEFINEFUNC3(int, BIO_write, BIO *a, a, const void *b, b, int c, c, return -1, return)
 DEFINEFUNC(int, BN_num_bits, const BIGNUM *a, a, return 0, return)
 #if OPENSSL_VERSION_NUMBER >= 0x10100000L
@@ -165,15 +165,14 @@ DEFINEFUNC(void, CRYPTO_set_id_callback,
 DEFINEFUNC(void, CRYPTO_free, void *a, a, return, DUMMYARG)
 DEFINEFUNC(DSA *, DSA_new, DUMMYARG, DUMMYARG, return 0, return)
 DEFINEFUNC(void, DSA_free, DSA *a, a, return, DUMMYARG)
-DEFINEFUNC(int, DSA_bits, DSA *a, a, return 0, return)
+//### Missing in openssl DEFINEFUNC(int, DSA_bits, DSA *a, a, return 0, return)
 DEFINEFUNC3(X509 *, d2i_X509, X509 **a, a, const unsigned char **b, b, long c, c, return 0, return)
 DEFINEFUNC2(char *, ERR_error_string, unsigned long a, a, char *b, b, return 0, return)
 DEFINEFUNC(unsigned long, ERR_get_error, DUMMYARG, DUMMYARG, return 0, return)
 DEFINEFUNC(void, ERR_free_strings, void, DUMMYARG, return, DUMMYARG)
-DEFINEFUNC(EVP_CIPHER_CTX *, EVP_CIPHER_CTX_new, void *a, a, return 0, return)
+DEFINEFUNC(EVP_CIPHER_CTX *, EVP_CIPHER_CTX_new, void, DUMMYARG, return 0, return)
 DEFINEFUNC(void, EVP_CIPHER_CTX_free, EVP_CIPHER_CTX *a, a, return, DUMMYARG)
 DEFINEFUNC(void, EVP_CIPHER_CTX_cleanup, EVP_CIPHER_CTX *a, a, return, DUMMYARG)
-DEFINEFUNC(void, EVP_CIPHER_CTX_cleanup, EVP_CIPHER_CTX *a, a, return, DUMMYARG)
 DEFINEFUNC(void, EVP_CIPHER_CTX_init, EVP_CIPHER_CTX *a, a, return, DUMMYARG)
 DEFINEFUNC4(int, EVP_CIPHER_CTX_ctrl, EVP_CIPHER_CTX *ctx, ctx, int type, type, int arg, arg, void *ptr, ptr, return 0, return);
 DEFINEFUNC2(int, EVP_CIPHER_CTX_set_key_length, EVP_CIPHER_CTX *ctx, ctx, int keylen, keylen, return 0, return)
@@ -256,6 +255,7 @@ DEFINEFUNC2(char *, sk_value, STACK *a,
 #endif
 DEFINEFUNC(int, SSL_accept, SSL *a, a, return -1, return)
 DEFINEFUNC(int, SSL_clear, SSL *a, a, return -1, return)
+DEFINEFUNC(int, SSL_session_reused, SSL *a, a, return 0, return)
 DEFINEFUNC3(char *, SSL_CIPHER_description, SSL_CIPHER *a, a, char *b, b, int c, c, return 0, return)
 DEFINEFUNC2(int, SSL_CIPHER_get_bits, SSL_CIPHER *a, a, int *b, b, return 0, return)
 DEFINEFUNC(int, SSL_connect, SSL *a, a, return -1, return)
@@ -457,12 +457,12 @@ DEFINEFUNC(DH *, DH_new, DUMMYARG, DUMMY
 DEFINEFUNC(void, DH_free, DH *dh, dh, return, DUMMYARG)
 DEFINEFUNC3(DH *, d2i_DHparams, DH**a, a, const unsigned char **pp, pp, long length, length, return 0, return)
 DEFINEFUNC2(int, i2d_DHparams, DH *a, a, unsigned char **p, p, return -1, return)
-DEFINEFUNC(void, DH_get0_pqg, DH *dh, dh, const BIGNUM **p, p, const BIGNUM **q, q, const BIGNUM **g, g, return, DUMMYARG)
+DEFINEFUNC4(void, DH_get0_pqg, DH *dh, dh, const BIGNUM **p, p, const BIGNUM **q, q, const BIGNUM **g, g, return, DUMMYARG)
 DEFINEFUNC(int, DH_bits, DH *dh, dh, return 0, return)
 DEFINEFUNC2(int, DH_check, DH *dh, dh, int *codes, codes, return 0, return)
 DEFINEFUNC3(BIGNUM *, BN_bin2bn, const unsigned char *s, s, int len, len, BIGNUM *ret, ret, return 0, return)
 #ifndef OPENSSL_NO_EC
-DEFINEFUNC(EC_KEY *, EC_KEY_dup, const EC_KEY *ec, ec, return 0, return)
+DEFINEFUNC(EC_KEY *, EC_KEY_dup, EC_KEY *ec, ec, return 0, return)
 DEFINEFUNC(EC_KEY *, EC_KEY_new_by_curve_name, int nid, nid, return 0, return)
 DEFINEFUNC(void, EC_KEY_free, EC_KEY *ecdh, ecdh, return, DUMMYARG)
 DEFINEFUNC2(size_t, EC_get_builtin_curves, EC_builtin_curve * r, r, size_t nitems, nitems, return 0, return)
@@ -816,7 +816,7 @@ bool q_resolveOpenSslSymbols()
     RESOLVEFUNC(CRYPTO_set_locking_callback)
     RESOLVEFUNC(DSA_new)
     RESOLVEFUNC(DSA_free)
-    RESOLVEFUNC(DSA_bits)
+    //### Missing in openssl  RESOLVEFUNC(DSA_bits)
     RESOLVEFUNC(ERR_error_string)
     RESOLVEFUNC(ERR_get_error)
     RESOLVEFUNC(ERR_free_strings)
@@ -910,6 +910,7 @@ bool q_resolveOpenSslSymbols()
     RESOLVEFUNC(SSL_CTX_get_cert_store);
     RESOLVEFUNC(SSL_accept)
     RESOLVEFUNC(SSL_clear)
+    RESOLVEFUNC(SSL_session_reused)
     RESOLVEFUNC(SSL_connect)
     RESOLVEFUNC(SSL_free)
     RESOLVEFUNC(SSL_get_ciphers)
--- qtbase-opensource-src-5.8.0-beta/src/network/ssl/qsslsocket_openssl_symbols_p.h.0054~	2016-11-07 16:23:59.259636639 +0100
+++ qtbase-opensource-src-5.8.0-beta/src/network/ssl/qsslsocket_openssl_symbols_p.h	2016-11-07 16:25:27.604677384 +0100
@@ -222,10 +222,10 @@ int q_ASN1_STRING_length(ASN1_STRING *a)
 int q_ASN1_STRING_to_UTF8(unsigned char **a, ASN1_STRING *b);
 long q_BIO_ctrl(BIO *a, int b, long c, void *d);
 Q_AUTOTEST_EXPORT int q_BIO_free(BIO *a);
-Q_AUTOTEST_EXPORT BIO *q_BIO_new(BIO_METHOD *a);
+Q_AUTOTEST_EXPORT BIO *q_BIO_new(const BIO_METHOD *a);
 BIO *q_BIO_new_mem_buf(void *a, int b);
 int q_BIO_read(BIO *a, void *b, int c);
-Q_AUTOTEST_EXPORT BIO_METHOD *q_BIO_s_mem();
+Q_AUTOTEST_EXPORT const BIO_METHOD *q_BIO_s_mem();
 Q_AUTOTEST_EXPORT int q_BIO_write(BIO *a, const void *b, int c);
 int q_BN_num_bits(const BIGNUM *a);
 #if OPENSSL_VERSION_NUMBER >= 0x10100000L
@@ -346,6 +346,7 @@ void q_sk_free(STACK *a);
 char * q_sk_value(STACK *a, int b);
 #endif
 int q_SSL_accept(SSL *a);
+int q_SSL_session_reused(SSL *a);
 int q_SSL_clear(SSL *a);
 char *q_SSL_CIPHER_description(SSL_CIPHER *a, char *b, int c);
 int q_SSL_CIPHER_get_bits(SSL_CIPHER *a, int *b);
@@ -515,7 +516,7 @@ BIGNUM *q_BN_bin2bn(const unsigned char
 
 #ifndef OPENSSL_NO_EC
 // EC Diffie-Hellman support
-EC_KEY *q_EC_KEY_dup(const EC_KEY *src);
+EC_KEY *q_EC_KEY_dup(EC_KEY *src);
 EC_KEY *q_EC_KEY_new_by_curve_name(int nid);
 void q_EC_KEY_free(EC_KEY *ecdh);
 #define q_SSL_CTX_set_tmp_ecdh(ctx, ecdh) q_SSL_CTX_ctrl((ctx), SSL_CTRL_SET_TMP_ECDH, 0, (char *)ecdh)
