From 714112189acc0aaf0256e095cf8fcbb8289d66ea Mon Sep 17 00:00:00 2001
From: Luca Beldi <v.ronin@yahoo.it>
Date: Fri, 23 Apr 2021 20:30:17 +0100
Subject: [PATCH 014/132] Fix QTreeModel calling beginRemoveRows twice

For items that are children of other items, removeRows calls
beginRemoveRows directly and then once again inside takeChild()
The signal blocker that dates back to the monolitic import from Nokia
prevents the model from emitting extra signals
but the persistent indexes are corrupted nonetheless.

Fixes: QTBUG-90030
Pick-to: 6.1 6.0 5.15
Change-Id: I5bc4b2598bf13247683b113faeec22471f1f04a4
Reviewed-by: David Faure <david.faure@kdab.com>
(cherry picked from commit 6ec3fa2842b5c4714dc9a3953b2721ef70dd957b)
---
 src/widgets/itemviews/qtreewidget.cpp          | 18 +++++++-----------
 .../itemviews/qtreewidget/tst_qtreewidget.cpp  | 16 ++++++++++++++++
 2 files changed, 23 insertions(+), 11 deletions(-)

diff --git a/src/widgets/itemviews/qtreewidget.cpp b/src/widgets/itemviews/qtreewidget.cpp
index b795b79c28..81aed27361 100644
--- a/src/widgets/itemviews/qtreewidget.cpp
+++ b/src/widgets/itemviews/qtreewidget.cpp
@@ -508,22 +508,18 @@ bool QTreeModel::insertColumns(int column, int count, const QModelIndex &parent)
 bool QTreeModel::removeRows(int row, int count, const QModelIndex &parent) {
     if (count < 1 || row < 0 || (row + count) > rowCount(parent))
         return false;
-
-    beginRemoveRows(parent, row, row + count - 1);
-
-    QSignalBlocker blocker(this);
-
-    QTreeWidgetItem *itm = item(parent);
+    QTreeWidgetItem *parentItem = item(parent);
+    // if parentItem is valid, begin/end RemoveRows is handled by takeChild below
+    if (!parentItem)
+        beginRemoveRows(parent, row, row + count - 1);
     for (int i = row + count - 1; i >= row; --i) {
-        QTreeWidgetItem *child = itm ? itm->takeChild(i) : rootItem->children.takeAt(i);
+        QTreeWidgetItem *child = parentItem ? parentItem->takeChild(i) : rootItem->children.takeAt(i);
         Q_ASSERT(child);
         child->view = nullptr;
         delete child;
-        child = nullptr;
     }
-    blocker.unblock();
-
-    endRemoveRows();
+    if (!parentItem)
+        endRemoveRows();
     return true;
 }
 
diff --git a/tests/auto/widgets/itemviews/qtreewidget/tst_qtreewidget.cpp b/tests/auto/widgets/itemviews/qtreewidget/tst_qtreewidget.cpp
index 7da56ab797..b129868bbd 100644
--- a/tests/auto/widgets/itemviews/qtreewidget/tst_qtreewidget.cpp
+++ b/tests/auto/widgets/itemviews/qtreewidget/tst_qtreewidget.cpp
@@ -151,6 +151,7 @@ private slots:
     void getMimeDataWithInvalidItem();
     void testVisualItemRect();
     void reparentHiddenItem();
+    void persistentChildIndex();
 #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     void clearItemData();
 #endif
@@ -3597,6 +3598,21 @@ void tst_QTreeWidget::reparentHiddenItem()
     QVERIFY(grandChild->isHidden());
 }
 
+void tst_QTreeWidget::persistentChildIndex() // QTBUG-90030
+{
+    QTreeWidget tree;
+    QTreeWidgetItem *toplevel = new QTreeWidgetItem(QStringList{QStringLiteral("toplevel")});
+    tree.addTopLevelItem(toplevel);
+    QModelIndex firstIndex = tree.model()->index(0, 0);
+    QTreeWidgetItem *child1 = new QTreeWidgetItem(QStringList{QStringLiteral("child1")});
+    QTreeWidgetItem *child2 = new QTreeWidgetItem(QStringList{QStringLiteral("child2")});
+    toplevel->addChildren({child1, child2});
+    QPersistentModelIndex persistentIdx = tree.model()->index(1, 0, firstIndex);
+    QCOMPARE(persistentIdx.data().toString(), QStringLiteral("child2"));
+    tree.model()->removeRows(0, 1, firstIndex);
+    QCOMPARE(persistentIdx.data().toString(), QStringLiteral("child2"));
+}
+
 #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
 void tst_QTreeWidget::clearItemData()
 {
-- 
2.35.1

