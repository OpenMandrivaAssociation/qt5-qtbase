From 0fbb484d4aeb4eff50eb4aa312ab8ff41ce4e082 Mon Sep 17 00:00:00 2001
From: Alexander Volkov <avolkov@astralinux.ru>
Date: Wed, 18 Nov 2020 15:05:20 +0300
Subject: [PATCH 118/171] QStandardPaths: Don't change permissions of
 XDG_RUNTIME_DIR

Conform to the XDG Base Directory Specification:
"If, when attempting to write a file, the destination directory
is non-existent an attempt should be made to create it with
permission 0700. If the destination directory exists already
the permissions should not be changed."

At the same time the spec states about XDG_RUNTIME_DIR that
"its Unix access mode MUST be 0700", so don't consider the
directory with wrong permissions correct and use a fallback.

Task-number: QTBUG-68338
Change-Id: I03c6b35b3f7d5ceb8e6326695bfc8207da92ea67
Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>
Reviewed-by: David Faure <david.faure@kdab.com>
(cherry picked from commit 68de00e0d4f2c574162a6e033d41786e3757d25d)
Reviewed-by: Qt Cherry-pick Bot <cherrypick_bot@qt-project.org>
---
 src/corelib/io/qstandardpaths_unix.cpp        | 59 ++++++++++---------
 .../io/qstandardpaths/tst_qstandardpaths.cpp  |  8 ++-
 2 files changed, 37 insertions(+), 30 deletions(-)

diff --git a/src/corelib/io/qstandardpaths_unix.cpp b/src/corelib/io/qstandardpaths_unix.cpp
index 2e779bef66..4ebeefcedb 100644
--- a/src/corelib/io/qstandardpaths_unix.cpp
+++ b/src/corelib/io/qstandardpaths_unix.cpp
@@ -94,6 +94,30 @@ static QLatin1String xdg_key_name(QStandardPaths::StandardLocation type)
 }
 #endif
 
+static QByteArray unixPermissionsText(QFile::Permissions permissions)
+{
+    mode_t perms = 0;
+    if (permissions & QFile::ReadOwner)
+        perms |= S_IRUSR;
+    if (permissions & QFile::WriteOwner)
+        perms |= S_IWUSR;
+    if (permissions & QFile::ExeOwner)
+        perms |= S_IXUSR;
+    if (permissions & QFile::ReadGroup)
+        perms |= S_IRGRP;
+    if (permissions & QFile::WriteGroup)
+        perms |= S_IWGRP;
+    if (permissions & QFile::ExeGroup)
+        perms |= S_IXGRP;
+    if (permissions & QFile::ReadOther)
+        perms |= S_IROTH;
+    if (permissions & QFile::WriteOther)
+        perms |= S_IWOTH;
+    if (permissions & QFile::ExeOther)
+        perms |= S_IXOTH;
+    return '0' + QByteArray::number(perms, 8);
+}
+
 static bool checkXdgRuntimeDir(const QString &xdgRuntimeDir)
 {
     auto describeMetaData = [](const QFileSystemMetaData &metaData) -> QByteArray {
@@ -113,27 +137,7 @@ static bool checkXdgRuntimeDir(const QString &xdgRuntimeDir)
         else
             description += "a block device";
 
-        // convert QFileSystemMetaData permissions back to Unix
-        mode_t perms = 0;
-        if (metaData.permissions() & QFile::ReadOwner)
-            perms |= S_IRUSR;
-        if (metaData.permissions() & QFile::WriteOwner)
-            perms |= S_IWUSR;
-        if (metaData.permissions() & QFile::ExeOwner)
-            perms |= S_IXUSR;
-        if (metaData.permissions() & QFile::ReadGroup)
-            perms |= S_IRGRP;
-        if (metaData.permissions() & QFile::WriteGroup)
-            perms |= S_IWGRP;
-        if (metaData.permissions() & QFile::ExeGroup)
-            perms |= S_IXGRP;
-        if (metaData.permissions() & QFile::ReadOther)
-            perms |= S_IROTH;
-        if (metaData.permissions() & QFile::WriteOther)
-            perms |= S_IWOTH;
-        if (metaData.permissions() & QFile::ExeOther)
-            perms |= S_IXOTH;
-        description += " permissions 0" + QByteArray::number(perms, 8);
+        description += " permissions " + unixPermissionsText(metaData.permissions());
 
         return description
                 + " owned by UID " + QByteArray::number(metaData.userId())
@@ -186,14 +190,11 @@ static bool checkXdgRuntimeDir(const QString &xdgRuntimeDir)
 
     // "and he MUST be the only one having read and write access to it. Its Unix access mode MUST be 0700."
     if (metaData.permissions() != wantedPerms) {
-        // attempt to correct:
-        QSystemError error;
-        if (!QFileSystemEngine::setPermissions(entry, wantedPerms, error)) {
-            qErrnoWarning("QStandardPaths: could not set correct permissions on runtime directory "
-                          "'%ls', which is %s", qUtf16Printable(xdgRuntimeDir),
-                          describeMetaData(metaData).constData());
-            return false;
-        }
+        qWarning("QStandardPaths: wrong permissions on runtime directory %ls, %s instead of %s",
+                 qUtf16Printable(xdgRuntimeDir),
+                 unixPermissionsText(metaData.permissions()).constData(),
+                 unixPermissionsText(wantedPerms).constData());
+        return false;
     }
 
     return true;
diff --git a/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp b/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp
index afbd64c405..a0aefac268 100644
--- a/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp
+++ b/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp
@@ -532,7 +532,12 @@ void tst_qstandardpaths::testCustomRuntimeDirectory_data()
         d.mkdir("runtime");
         QFile::setPermissions(p, QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner |
                                  QFile::ExeGroup | QFile::ExeOther);
-        return updateRuntimeDir(p);
+        updateRuntimeDir(p);
+        QTest::ignoreMessage(QtWarningMsg,
+                             QString("QStandardPaths: wrong permissions on runtime directory %1, "
+                                     "0711 instead of 0700")
+                             .arg(p).toLatin1());
+        return fallbackXdgRuntimeDir();
     });
 
     addRow("environment:wrong-owner", [](QDir &) {
@@ -597,6 +602,7 @@ void tst_qstandardpaths::testCustomRuntimeDirectory_data()
         clearRuntimeDir();
         QString p = fallbackXdgRuntimeDir();
         d.mkdir(p);         // probably has wrong permissions
+        QFile::setPermissions(p, QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner);
         return p;
     });
 
-- 
2.31.1

