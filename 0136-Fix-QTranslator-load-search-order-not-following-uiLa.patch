From e6e23d061cb8ac81007119603f8e7c64fc572e04 Mon Sep 17 00:00:00 2001
From: Karsten Heimrich <karsten.heimrich@qt.io>
Date: Wed, 2 Dec 2020 13:15:14 +0100
Subject: [PATCH 136/171] Fix QTranslator::load() search order not following
 uiLanguages order

Merge the exact and and fuzzy search loop. This way we prioritize
translations which match a more preferred language loosely over ones
which match a less preferred language exactly. This is likely what
most users want.

Fixes: QTBUG-86179
Change-Id: Id1610c82a2e77edf9a5d4417968dcc4c307810d5
Reviewed-by: Oswald Buddenhagen <oswald.buddenhagen@gmx.de>
(cherry picked from commit 8df2bf04917e742470bbd1ff69e003811c5975ff)
---
 src/corelib/kernel/qtranslator.cpp | 34 ++++++++----------------------
 1 file changed, 9 insertions(+), 25 deletions(-)

diff --git a/src/corelib/kernel/qtranslator.cpp b/src/corelib/kernel/qtranslator.cpp
index d7d670b5bc..36d9ea4998 100644
--- a/src/corelib/kernel/qtranslator.cpp
+++ b/src/corelib/kernel/qtranslator.cpp
@@ -647,7 +647,6 @@ static QString find_translation(const QLocale & locale,
     QString realname;
     realname += path + filename + prefix; // using += in the hope for some reserve capacity
     const int realNameBaseSize = realname.size();
-    QStringList fuzzyLocales;
 
     // see http://www.unicode.org/reports/tr35/#LanguageMatching for inspiration
 
@@ -661,32 +660,12 @@ static QString find_translation(const QLocale & locale,
     }
 #endif
 
-    // try explicit locales names first
     for (QString localeName : qAsConst(languages)) {
         localeName.replace(QLatin1Char('-'), QLatin1Char('_'));
 
-        realname += localeName + suffixOrDotQM;
-        if (is_readable_file(realname))
-            return realname;
-
-        realname.truncate(realNameBaseSize + localeName.size());
-        if (is_readable_file(realname))
-            return realname;
-
-        realname.truncate(realNameBaseSize);
-        fuzzyLocales.append(localeName);
-    }
-
-    // start guessing
-    for (const QString &fuzzyLocale : qAsConst(fuzzyLocales)) {
-        QStringRef localeName(&fuzzyLocale);
+        // try the complete locale name first and progressively truncate from
+        // the end until a matching language tag is found (with or without suffix)
         for (;;) {
-            int rightmost = localeName.lastIndexOf(QLatin1Char('_'));
-            // no truncations? fail
-            if (rightmost <= 0)
-                break;
-            localeName.truncate(rightmost);
-
             realname += localeName + suffixOrDotQM;
             if (is_readable_file(realname))
                 return realname;
@@ -696,6 +675,11 @@ static QString find_translation(const QLocale & locale,
                 return realname;
 
             realname.truncate(realNameBaseSize);
+
+            int rightmost = localeName.lastIndexOf(QLatin1Char('_'));
+            if (rightmost <= 0)
+                break; // no truncations anymore, break
+            localeName.truncate(rightmost);
         }
     }
 
@@ -754,10 +738,10 @@ static QString find_translation(const QLocale & locale,
     \li \c /opt/foolib/foo.es
     \li \c /opt/foolib/foo.fr_CA.qm
     \li \c /opt/foolib/foo.fr_CA
-    \li \c /opt/foolib/foo.de.qm
-    \li \c /opt/foolib/foo.de
     \li \c /opt/foolib/foo.fr.qm
     \li \c /opt/foolib/foo.fr
+    \li \c /opt/foolib/foo.de.qm
+    \li \c /opt/foolib/foo.de
     \li \c /opt/foolib/foo.qm
     \li \c /opt/foolib/foo.
     \li \c /opt/foolib/foo
-- 
2.31.1

