From c3e70187e6ab774b6cf06d678dfa23a85474576f Mon Sep 17 00:00:00 2001
From: Erik Larsson <erik@ortogonal.com>
Date: Thu, 30 Oct 2014 10:52:10 +0100
Subject: [PATCH] Fix to make QtWayland compositor work with the iMX6 CPU.

This is not a finished version, it's just the first test.

Change-Id: Icb6b55dddc7bd8b2871a7aca1279ef30e3b496d4
Signed-off-by: Erik Larsson <erik@ortogonal.com>
---
 .../devices/linux-imx6-g++/qeglfshooks_imx6.cpp    |  7 +++++++
 .../eglconvenience/qeglplatformintegration.cpp     | 13 +++++++++---
 .../eglconvenience/qeglplatformintegration_p.h     |  3 +++
 src/plugins/platforms/eglfs/eglfs.pro              |  2 +-
 src/plugins/platforms/eglfs/qeglfshooks.h          |  1 +
 src/plugins/platforms/eglfs/qeglfshooks_stub.cpp   |  6 ++++++
 src/plugins/platforms/eglfs/qeglfsintegration.cpp  | 24 +++++++++++++++++++++-
 src/plugins/platforms/eglfs/qeglfsintegration.h    |  4 ++++
 8 files changed, 55 insertions(+), 5 deletions(-)

diff --git a/mkspecs/devices/linux-imx6-g++/qeglfshooks_imx6.cpp b/mkspecs/devices/linux-imx6-g++/qeglfshooks_imx6.cpp
index 719d851..62fe2fb 100644
--- a/mkspecs/devices/linux-imx6-g++/qeglfshooks_imx6.cpp
+++ b/mkspecs/devices/linux-imx6-g++/qeglfshooks_imx6.cpp
@@ -45,6 +45,7 @@ public:
     virtual EGLNativeWindowType createNativeWindow(QPlatformWindow *window, const QSize &size, const QSurfaceFormat &format);
     virtual void destroyNativeWindow(EGLNativeWindowType window);
     virtual EGLNativeDisplayType platformDisplay() const;
+    virtual EGLNativeDisplayType waylandDisplay(void *) const;
 
 private:
     QSize mScreenSize;
@@ -80,6 +81,12 @@ EGLNativeDisplayType QEglFSImx6Hooks::platformDisplay() const
     return mNativeDisplay;
 }
 
+EGLNativeDisplayType QEglFSImx6Hooks::waylandDisplay(void *display) const
+{
+    qDebug() << Q_FUNC_INFO << "fbGetDisplay with wl_display" << display;
+    return fbGetDisplay(display);
+}
+
 EGLNativeWindowType QEglFSImx6Hooks::createNativeWindow(QPlatformWindow *window, const QSize &size, const QSurfaceFormat &format)
 {
     Q_UNUSED(window)
diff --git a/src/platformsupport/eglconvenience/qeglplatformintegration.cpp b/src/platformsupport/eglconvenience/qeglplatformintegration.cpp
index 7d05b54..b00fd70 100644
--- a/src/platformsupport/eglconvenience/qeglplatformintegration.cpp
+++ b/src/platformsupport/eglconvenience/qeglplatformintegration.cpp
@@ -102,7 +102,10 @@ QEGLPlatformIntegration::~QEGLPlatformIntegration()
 
 void QEGLPlatformIntegration::initialize()
 {
-    m_display = eglGetDisplay(nativeDisplay());
+    /* ERIK: byta ut native display mot wl_display kanske? Och i sÃ¥ fall hur? */
+    // TODO: Make some argument to controll if we use Wayland or not
+    qDebug() << Q_FUNC_INFO << "waylandDisplay() returns" << waylandDisplay();
+    m_display = eglGetDisplay(waylandDisplay());
     if (m_display == EGL_NO_DISPLAY)
         qFatal("Could not open egl display");
 
@@ -193,7 +196,8 @@ enum ResourceType {
     EglContext,
     EglConfig,
     NativeDisplay,
-    XlibDisplay
+    XlibDisplay,
+    WaylandDisplay
 };
 
 static int resourceType(const QByteArray &key)
@@ -204,7 +208,8 @@ static int resourceType(const QByteArray &key)
         QByteArrayLiteral("eglcontext"),
         QByteArrayLiteral("eglconfig"),
         QByteArrayLiteral("nativedisplay"),
-        QByteArrayLiteral("display")
+        QByteArrayLiteral("display"),
+        QByteArrayLiteral("waylanddisplay")
     };
     const QByteArray *end = names + sizeof(names) / sizeof(names[0]);
     const QByteArray *result = std::find(names, end, key);
@@ -224,6 +229,8 @@ void *QEGLPlatformIntegration::nativeResourceForIntegration(const QByteArray &re
     case NativeDisplay:
         result = reinterpret_cast<void*>(nativeDisplay());
         break;
+    case WaylandDisplay:
+        result = reinterpret_cast<void*>(waylandCompositorDisplay());
     default:
         break;
     }
diff --git a/src/platformsupport/eglconvenience/qeglplatformintegration_p.h b/src/platformsupport/eglconvenience/qeglplatformintegration_p.h
index 4d7adce..0021afb 100644
--- a/src/platformsupport/eglconvenience/qeglplatformintegration_p.h
+++ b/src/platformsupport/eglconvenience/qeglplatformintegration_p.h
@@ -49,6 +49,7 @@
 #include <qpa/qplatformnativeinterface.h>
 #include <QtCore/QVariant>
 #include <EGL/egl.h>
+#include <wayland-server.h>
 
 QT_BEGIN_NAMESPACE
 
@@ -103,6 +104,8 @@ protected:
                                                               QOffscreenSurface *surface) const = 0;
 
     virtual EGLNativeDisplayType nativeDisplay() const { return EGL_DEFAULT_DISPLAY; }
+    virtual EGLNativeDisplayType waylandDisplay() const { return EGL_DEFAULT_DISPLAY; }
+    virtual struct wl_display* waylandCompositorDisplay() const { return NULL; }
 
     void createInputHandlers();
 
diff --git a/src/plugins/platforms/eglfs/eglfs.pro b/src/plugins/platforms/eglfs/eglfs.pro
index 3ebe05b..60bc7f8 100644
--- a/src/plugins/platforms/eglfs/eglfs.pro
+++ b/src/plugins/platforms/eglfs/eglfs.pro
@@ -6,5 +6,5 @@ PLUGIN_CLASS_NAME = QEglFSIntegrationPlugin
 load(qt_plugin)
 
 SOURCES += $$PWD/main.cpp
-
+LIBS+=-lwayland-server
 include(eglfs.pri)
diff --git a/src/plugins/platforms/eglfs/qeglfshooks.h b/src/plugins/platforms/eglfs/qeglfshooks.h
index c51af17..468fdef 100644
--- a/src/plugins/platforms/eglfs/qeglfshooks.h
+++ b/src/plugins/platforms/eglfs/qeglfshooks.h
@@ -52,6 +52,7 @@ public:
     virtual void platformInit();
     virtual void platformDestroy();
     virtual EGLNativeDisplayType platformDisplay() const;
+    virtual EGLNativeDisplayType waylandDisplay(void *display) const;
     virtual QSizeF physicalScreenSize() const;
     virtual QSize screenSize() const;
     virtual QDpi logicalDpi() const;
diff --git a/src/plugins/platforms/eglfs/qeglfshooks_stub.cpp b/src/plugins/platforms/eglfs/qeglfshooks_stub.cpp
index b6b1be9..e6eefa1 100644
--- a/src/plugins/platforms/eglfs/qeglfshooks_stub.cpp
+++ b/src/plugins/platforms/eglfs/qeglfshooks_stub.cpp
@@ -94,6 +94,12 @@ EGLNativeDisplayType QEglFSHooks::platformDisplay() const
     return EGL_DEFAULT_DISPLAY;
 }
 
+EGLNativeDisplayType QEglFSHooks::waylandDisplay(void *display) const
+{
+    Q_UNUSED(display)
+    return EGL_DEFAULT_DISPLAY;
+}
+
 QSizeF QEglFSHooks::physicalScreenSize() const
 {
     return q_physicalScreenSizeFromFb(framebuffer, screenSize());
diff --git a/src/plugins/platforms/eglfs/qeglfsintegration.cpp b/src/plugins/platforms/eglfs/qeglfsintegration.cpp
index 2a4eae3..b574332 100644
--- a/src/plugins/platforms/eglfs/qeglfsintegration.cpp
+++ b/src/plugins/platforms/eglfs/qeglfsintegration.cpp
@@ -52,6 +52,7 @@
 #include <qpa/qplatformcursor.h>
 
 #include <EGL/egl.h>
+#include <QDebug>
 
 static void initResources()
 {
@@ -63,7 +64,8 @@ QT_BEGIN_NAMESPACE
 QEglFSIntegration::QEglFSIntegration()
 {
     mDisableInputHandlers = qgetenv("QT_QPA_EGLFS_DISABLE_INPUT").toInt();
-
+    mWlDisplay = NULL;
+    mCompositorDisplay = NULL;
     initResources();
 }
 
@@ -96,6 +98,26 @@ EGLNativeDisplayType QEglFSIntegration::nativeDisplay() const
     return QEglFSHooks::hooks()->platformDisplay();
 }
 
+EGLNativeDisplayType QEglFSIntegration::waylandDisplay() const
+{
+    if (!mCompositorDisplay) {
+        mCompositorDisplay = wl_display_create();
+        qDebug() << Q_FUNC_INFO << "allocate wl_display" << mCompositorDisplay;
+    }
+
+    if (!mWlDisplay) {
+        mWlDisplay = QEglFSHooks::hooks()->waylandDisplay(mCompositorDisplay);
+    }
+
+    return (EGLNativeDisplayType)mWlDisplay;
+}
+
+struct wl_display* QEglFSIntegration::waylandCompositorDisplay() const
+{
+    // TODO: This function shall return a wl_display pointer
+    return mCompositorDisplay;
+}
+
 QEGLPlatformScreen *QEglFSIntegration::createScreen() const
 {
     return new QEglFSScreen(display());
diff --git a/src/plugins/platforms/eglfs/qeglfsintegration.h b/src/plugins/platforms/eglfs/qeglfsintegration.h
index d612a27..92f2671 100644
--- a/src/plugins/platforms/eglfs/qeglfsintegration.h
+++ b/src/plugins/platforms/eglfs/qeglfsintegration.h
@@ -64,9 +64,13 @@ protected:
                                                       const QSurfaceFormat &format,
                                                       QOffscreenSurface *surface) const Q_DECL_OVERRIDE;
     EGLNativeDisplayType nativeDisplay() const Q_DECL_OVERRIDE;
+    EGLNativeDisplayType waylandDisplay() const Q_DECL_OVERRIDE;
+    struct wl_display* waylandCompositorDisplay() const Q_DECL_OVERRIDE;
 
 private:
     bool mDisableInputHandlers;
+    mutable void *mWlDisplay;
+    mutable struct wl_display *mCompositorDisplay;
 };
 
 QT_END_NAMESPACE
-- 
1.9.1
