diff -up qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp.omv~ qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp
--- qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp.omv~	2020-03-09 20:36:57.727788037 +0100
+++ qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp	2020-03-09 20:42:21.730772318 +0100
@@ -65,6 +65,7 @@
 
 #include <sqlite3.h>
 #include <functional>
+#include "sqlite_blocking.h"
 
 Q_DECLARE_OPAQUE_POINTER(sqlite3*)
 Q_DECLARE_METATYPE(sqlite3*)
@@ -273,7 +274,7 @@ bool QSQLiteResultPrivate::fetchNext(QSq
         q->setAt(QSql::AfterLastRow);
         return false;
     }
-    res = sqlite3_step(stmt);
+    res = sqlite3_blocking_step(stmt);
 
     switch(res) {
     case SQLITE_ROW:
@@ -388,7 +389,7 @@ bool QSQLiteResult::prepare(const QStrin
     const void *pzTail = NULL;
 
 #if (SQLITE_VERSION_NUMBER >= 3003011)
-    int res = sqlite3_prepare16_v2(d->drv_d_func()->access, query.constData(), (query.size() + 1) * sizeof(QChar),
+    int res = sqlite3_blocking_prepare16_v2(d->drv_d_func()->access, query.constData(), (query.size() + 1) * sizeof(QChar),
                                    &d->stmt, &pzTail);
 #else
     int res = sqlite3_prepare16(d->access, query.constData(), (query.size() + 1) * sizeof(QChar),
diff -up qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite_blocking.cpp.omv~ qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite_blocking.cpp
--- qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite_blocking.cpp.omv~	2020-03-09 20:40:04.015778999 +0100
+++ qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite_blocking.cpp	2020-03-09 20:39:56.989779340 +0100
@@ -0,0 +1,105 @@
+/*
+    Copyright (c) 2009 Bertjan Broeksema <broeksema@kde.org>
+    Copyright (c) 2014 Daniel Vr√°til <dvratil@redhat.com>
+
+    This library is free software; you can redistribute it and/or modify it
+    under the terms of the GNU Library General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    This library is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
+    License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to the
+    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+    02110-1301, USA.
+*/
+
+#include "sqlite_blocking.h"
+
+#include <sqlite3.h>
+
+#include <QMutex>
+#include <QWaitCondition>
+#include "qdebug.h"
+#include <QStringBuilder>
+#include <QThread>
+
+QString debugString()
+{
+    return QString(QLatin1String("[QSQLITE3: ") + QString::number(quint64(QThread::currentThreadId())) + QLatin1String("] "));
+}
+
+/* Based on example in http://www.sqlite.org/unlock_notify.html */
+
+struct UnlockNotification {
+    bool fired;
+    QWaitCondition cond;
+    QMutex mutex;
+};
+
+static void qSqlite3UnlockNotifyCb(void **apArg, int nArg)
+{
+    for (int i = 0; i < nArg; ++i) {
+        UnlockNotification *ntf = static_cast<UnlockNotification *>(apArg[i]);
+        ntf->mutex.lock();
+        ntf->fired = true;
+        ntf->cond.wakeOne();
+        ntf->mutex.unlock();
+    }
+}
+
+static int qSqlite3WaitForUnlockNotify(sqlite3 *db)
+{
+    int rc;
+    UnlockNotification un;
+    un.fired = false;
+
+    rc = sqlite3_unlock_notify(db, qSqlite3UnlockNotifyCb, (void *)&un);
+    Q_ASSERT(rc == SQLITE_LOCKED || rc == SQLITE_OK);
+
+    if (rc == SQLITE_OK) {
+        un.mutex.lock();
+        if (!un.fired) {
+            un.cond.wait(&un.mutex);
+        }
+        un.mutex.unlock();
+    }
+
+    return rc;
+}
+
+int sqlite3_blocking_step(sqlite3_stmt *pStmt)
+{
+    int rc;
+    while (SQLITE_LOCKED_SHAREDCACHE == (rc = sqlite3_step(pStmt))) {
+        //qDebug() << debugString() << "sqlite3_blocking_step: Waiting..."; QTime now; now.start();
+        rc = qSqlite3WaitForUnlockNotify(sqlite3_db_handle(pStmt));
+        //qDebug() << debugString() << "sqlite3_blocking_step: Waited for " << now.elapsed() << "ms";
+        if (rc != SQLITE_OK) {
+            break;
+        }
+        sqlite3_reset(pStmt);
+    }
+
+    return rc;
+}
+
+int sqlite3_blocking_prepare16_v2(sqlite3 *db, const void *zSql, int nSql,
+                                  sqlite3_stmt **ppStmt, const void **pzTail)
+{
+    int rc;
+    while (SQLITE_LOCKED_SHAREDCACHE == (rc = sqlite3_prepare16_v2(db, zSql, nSql, ppStmt, pzTail))) {
+        //qDebug() << debugString() << "sqlite3_blocking_prepare16_v2: Waiting..."; QTime now; now.start();
+        rc = qSqlite3WaitForUnlockNotify(db);
+        //qDebug() << debugString() << "sqlite3_blocking_prepare16_v2: Waited for " << now.elapsed() << "ms";
+        if (rc != SQLITE_OK) {
+            break;
+        }
+    }
+
+    return rc;
+}
diff -up qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite_blocking.h.omv~ qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite_blocking.h
--- qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite_blocking.h.omv~	2020-03-09 20:40:11.801778622 +0100
+++ qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite_blocking.h	2020-03-09 20:39:56.989779340 +0100
@@ -0,0 +1,39 @@
+/*
+    Copyright (c) 2009 Bertjan Broeksema <broeksema@kde.org>
+
+    This library is free software; you can redistribute it and/or modify it
+    under the terms of the GNU Library General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    This library is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
+    License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to the
+    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+    02110-1301, USA.
+*/
+
+#ifndef SQLITE_BLOCKING_H
+#define SQLITE_BLOCKING_H
+
+#include <QtCore/QString>
+#include <QtCore/QThread>
+
+QString debugString();
+
+struct sqlite3;
+struct sqlite3_stmt;
+
+int sqlite3_blocking_prepare16_v2(sqlite3 *db,            /* Database handle. */
+                                  const void *zSql,      /* SQL statement, UTF-16 encoded */
+                                  int nSql,              /* Length of zSql in bytes. */
+                                  sqlite3_stmt **ppStmt, /* OUT: A pointer to the prepared statement */
+                                  const void **pzTail    /* OUT: Pointer to unused portion of zSql */);
+
+int sqlite3_blocking_step(sqlite3_stmt *pStmt);
+
+#endif // SQLITE_BLOCKING_H
diff -up qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite.pro.omv~ qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite.pro
--- qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite.pro.omv~	2020-03-09 20:42:26.826772071 +0100
+++ qtbase-everywhere-src-5.15.0-beta1/src/plugins/sqldrivers/sqlite/sqlite.pro	2020-03-09 20:42:43.727771251 +0100
@@ -1,7 +1,7 @@
 TARGET = qsqlite
 
-HEADERS += $$PWD/qsql_sqlite_p.h
-SOURCES += $$PWD/qsql_sqlite.cpp $$PWD/smain.cpp
+HEADERS += $$PWD/qsql_sqlite_p.h $$PWD/sqlite_blocking.h
+SOURCES += $$PWD/qsql_sqlite.cpp $$PWD/sqlite_blocking.cpp $$PWD/smain.cpp
 
 include($$OUT_PWD/../qtsqldrivers-config.pri)
 QT_FOR_CONFIG += sqldrivers-private
