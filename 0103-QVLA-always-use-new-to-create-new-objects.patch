From ef82d845f47cebbc5a57961212e7ec73c18abd48 Mon Sep 17 00:00:00 2001
From: Giuseppe D'Angelo <giuseppe.dangelo@kdab.com>
Date: Tue, 24 Nov 2020 16:08:30 +0100
Subject: [PATCH 103/171] QVLA: always use new to create new objects

Even for non-complex types, it makes no sense to use the assignment
operator instead of placement new when constructing new objects.

Change-Id: I5f15fe4b3397cf52d1d35e6c4dcc513b94b3cf14
Reviewed-by: Volker Hilsheimer <volker.hilsheimer@qt.io>
Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>
Reviewed-by: Andrei Golubev <andrei.golubev@qt.io>
(cherry picked from commit e6e67f31c10da900ec6ecb06c2e827b17283be6a)
---
 src/corelib/tools/qvarlengtharray.h | 17 +++--------------
 1 file changed, 3 insertions(+), 14 deletions(-)

diff --git a/src/corelib/tools/qvarlengtharray.h b/src/corelib/tools/qvarlengtharray.h
index 6be695e317..fd0c99c032 100644
--- a/src/corelib/tools/qvarlengtharray.h
+++ b/src/corelib/tools/qvarlengtharray.h
@@ -153,18 +153,10 @@ public:
             T copy(t);
             realloc(s, s<<1);
             const int idx = s++;
-            if (QTypeInfo<T>::isComplex) {
-                new (ptr + idx) T(std::move(copy));
-            } else {
-                ptr[idx] = std::move(copy);
-            }
+            new (ptr + idx) T(std::move(copy));
         } else {
             const int idx = s++;
-            if (QTypeInfo<T>::isComplex) {
-                new (ptr + idx) T(t);
-            } else {
-                ptr[idx] = t;
-            }
+            new (ptr + idx) T(t);
         }
     }
 
@@ -172,10 +164,7 @@ public:
         if (s == a)
             realloc(s, s << 1);
         const int idx = s++;
-        if (QTypeInfo<T>::isComplex)
-            new (ptr + idx) T(std::move(t));
-        else
-            ptr[idx] = std::move(t);
+        new (ptr + idx) T(std::move(t));
     }
 
     void append(const T *buf, int size);
-- 
2.31.1

