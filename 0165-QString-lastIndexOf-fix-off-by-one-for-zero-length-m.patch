From 3a273ac47f20e82a1f2f63411b210025ca0f4495 Mon Sep 17 00:00:00 2001
From: Giuseppe D'Angelo <giuseppe.dangelo@kdab.com>
Date: Mon, 7 Dec 2020 23:42:33 +0100
Subject: [PATCH 165/171] QString::lastIndexOf: fix off-by-one for zero length
 matches

Otherwise, it would report that lastIndexOf of an empty pattern
in an empty string doesn't exist. Next commit adds extensive autotests;
for now, disable a broken autotest (which already features a comment
about why it's broken).

Change-Id: I9a0e5c0142007f81f5cf93e356c8bd82f00066f7
Reviewed-by: Thiago Macieira <thiago.macieira@intel.com>
(cherry picked from commit be83ff65c424cff1036e7da19d6175826d9f7ed9)
---
 src/corelib/text/qstring.cpp                    | 4 ++--
 tests/auto/corelib/text/qstring/tst_qstring.cpp | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/corelib/text/qstring.cpp b/src/corelib/text/qstring.cpp
index e6e7cbaad4..02a9fe3a30 100644
--- a/src/corelib/text/qstring.cpp
+++ b/src/corelib/text/qstring.cpp
@@ -4558,13 +4558,13 @@ int QString::lastIndexOf(const QRegularExpression &re, int from, QRegularExpress
         return -1;
     }
 
-    int endpos = (from < 0) ? (size() + from + 1) : (from + 1);
+    int endpos = (from < 0) ? (size() + from + 1) : (from);
     QRegularExpressionMatchIterator iterator = re.globalMatch(*this);
     int lastIndex = -1;
     while (iterator.hasNext()) {
         QRegularExpressionMatch match = iterator.next();
         int start = match.capturedStart();
-        if (start < endpos) {
+        if (start <= endpos) {
             lastIndex = start;
             if (rmatch)
                 *rmatch = std::move(match);
diff --git a/tests/auto/corelib/text/qstring/tst_qstring.cpp b/tests/auto/corelib/text/qstring/tst_qstring.cpp
index 4c4a8f0416..8f53824050 100644
--- a/tests/auto/corelib/text/qstring/tst_qstring.cpp
+++ b/tests/auto/corelib/text/qstring/tst_qstring.cpp
@@ -1674,7 +1674,7 @@ void tst_QString::lastIndexOf()
     QCOMPARE(haystack.lastIndexOf(needle.toLatin1(), from, cs), expected);
     QCOMPARE(haystack.lastIndexOf(needle.toLatin1().data(), from, cs), expected);
 
-    if (from >= -1 && from < haystack.size()) {
+    if (from >= -1 && from < haystack.size() && needle.size() > 0) {
         // unfortunately, QString and QRegExp don't have the same out of bound semantics
         // I think QString is wrong -- See file log for contact information.
         {
-- 
2.31.1

